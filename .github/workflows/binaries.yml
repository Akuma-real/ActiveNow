name: prerelease-binaries

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  version:
    name: Prepare fixed pre-release tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.ver.outputs.tag }}
      name: ${{ steps.ver.outputs.name }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set fixed pre-release tag
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          TAG="${PRE_TAG:-pre-release}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "name=Pre-release" >> "$GITHUB_OUTPUT"

      - name: Create or update pre-release (fixed tag)
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.ver.outputs.tag }}
          name: ${{ steps.ver.outputs.name }}
          prerelease: true
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: version
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_DIR: ~/.cache/sccache
      SCCACHE_CACHE_SIZE: 2G
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            musl: false
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            musl: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install sccache (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y sccache

      - name: Cache sccache store
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}

      - name: Setup musl toolchain (x86_64)
        if: runner.os == 'Linux' && matrix.musl && matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc" >> $GITHUB_ENV


      - name: Build release
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ matrix.musl }}" == "true" ]]; then
            cargo build --release --locked --target ${{ matrix.target }}
          else
            cargo build --release --locked --target ${{ matrix.target }}
          fi

      - name: Show sccache stats
        run: sccache --show-stats || true

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          BIN="activenow"
          TGT="${{ matrix.target }}"
          EXE=""
          mkdir -p dist
          # 将归档内的可执行文件命名为 activenow[.exe]，而不是带三元组后缀
          cp "target/${TGT}/release/${BIN}${EXE}" "dist/${BIN}${EXE}"
          tar -C dist -czf "dist/${BIN}-${TGT}.tar.gz" "${BIN}${EXE}"
          rm -f "dist/${BIN}${EXE}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: activenow-${{ matrix.target }}
          path: dist/*

      - name: Attach to pre-release (update files)
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.version.outputs.tag }}
          name: ${{ needs.version.outputs.name }}
          prerelease: true
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
