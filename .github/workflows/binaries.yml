name: prerelease-binaries

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  version:
    name: Compute next pre-release tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.ver.outputs.tag }}
      name: ${{ steps.ver.outputs.name }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute next tag from Cargo.toml
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          BASE=$(grep -m1 '^version\s*=\s*"[0-9]\+\.[0-9]\+\.[0-9]\+"' Cargo.toml | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          PRE_ID=${PRE_ID:-pre}
          # find existing pre-release tags for this base
          LAST=$(git tag -l "v${BASE}-${PRE_ID}.*" --sort=-version:refname | head -n1 || true)
          if [[ -z "$LAST" ]]; then N=1; else N=$(( $(echo "$LAST" | sed -E 's/.*\.'//) + 1 )); fi
          TAG="v${BASE}-${PRE_ID}.${N}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "name=Pre-release $TAG" >> "$GITHUB_OUTPUT"

      - name: Create or update pre-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          name: ${{ steps.ver.outputs.name }}
          prerelease: true
          make_latest: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: version
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_DIR: ~/.cache/sccache
      SCCACHE_CACHE_SIZE: 2G
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            musl: false
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            musl: true
          - os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-musl
            musl: true
          - os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            musl: false
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            musl: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install sccache (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y sccache

      - name: Install sccache (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install sccache

      - name: Install sccache (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install sccache -y

      - name: Cache sccache store
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}

      - name: Setup musl toolchain (x86_64)
        if: runner.os == 'Linux' && matrix.musl && matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc" >> $GITHUB_ENV

      - name: Setup musl toolchain (aarch64)
        if: runner.os == 'Linux' && matrix.musl && matrix.target == 'aarch64-unknown-linux-musl'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/musl"
          cd "$HOME/.local/musl"
          curl -sSL https://musl.cc/aarch64-linux-musl-cross.tgz | tar -xz
          TOOLDIR=$(echo aarch64-linux-musl-cross)
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=$HOME/.local/musl/$TOOLDIR/bin/aarch64-linux-musl-gcc" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_musl=$HOME/.local/musl/$TOOLDIR/bin/aarch64-linux-musl-ar" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_musl=$HOME/.local/musl/$TOOLDIR/bin/aarch64-linux-musl-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Enable static CRT (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $env:GITHUB_ENV

      - name: Build release
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ matrix.musl }}" == "true" ]]; then
            cargo build --release --locked --target ${{ matrix.target }}
          else
            cargo build --release --locked --target ${{ matrix.target }}
          fi

      - name: Show sccache stats
        run: sccache --show-stats || true

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          BIN="activenow"
          TGT="${{ matrix.target }}"
          EXE=""
          case "$TGT" in
            *windows*) EXE=".exe" ;;
          esac
          mkdir -p dist
          cp "target/${TGT}/release/${BIN}${EXE}" "dist/${BIN}-${TGT}${EXE}"
          if [[ "$TGT" == *windows* ]]; then
            # Windows runner has 7z
            7z a "dist/${BIN}-${TGT}.zip" "dist/${BIN}-${TGT}${EXE}" >/dev/null
            rm "dist/${BIN}-${TGT}${EXE}"
          else
            tar -C dist -czf "dist/${BIN}-${TGT}.tar.gz" "${BIN}-${TGT}${EXE}"
            rm "dist/${BIN}-${TGT}${EXE}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: activenow-${{ matrix.target }}
          path: dist/*

      - name: Attach to pre-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          files: dist/*
          prerelease: true
          make_latest: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
